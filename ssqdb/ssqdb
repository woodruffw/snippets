#!/usr/bin/env ruby
# frozen_string_literal: true

# ssqdb.rb
# Author: William Woodruff
# ------------------------
# A tiny static quote DB, inspired by QDB.
# ssqdb expects the following quote file format:
#  %
#  <person1> witty comment
#  <person2> witty response
#  %
#  <person3> less witty comment
#  %
#  (etc)
# ------------------------
# This code is licensed by William Woodruff under the MIT License.
# http://opensource.org/licenses/MIT

require "erb"
require "cgi"
require "json"

VERSION = 17

GENERATED_AT = Time.now.to_i

CSS = <<~CSS
  body {
    background-color: #F6F6F6;
    font-family: monospace;
    color: #222;
    max-width: 50em;
    margin: auto;
    padding: 1em;
  }

  a {
    color: #555;
  }

  pre {
    overflow: auto;
    white-space: pre-wrap;
  }

  .quote-link {
    text-decoration: none;
  }

  .quote-header {
    padding-left: 0.5em;
    padding-top: 0.5em;
    color: #555;
  }

  .quote-text {
    padding: 0 .5em .5em .5em;
  }

  .quote {
    padding: 0;
    margin: 0;
  }

  .quote:nth-of-type(odd) {
    background-color: #e0e0e0;
    padding-bottom: 0.1em;
    margin-bottom: -0.5em;
  }

  .left {
    float: left;
  }

  .right {
    float: right;
  }
CSS

JS = <<~JS
  function urlify() {
    var urlRegex = /(https?:\\/\\/[^\\s]+)/g;
    var newContent = document.body.innerHTML.replace(urlRegex, '<a href="$1" target="_blank">$1</a>');
    document.body.innerHTML = newContent;
  }

  function makeUrl(count) {
    var num = Math.floor(Math.random() * count);
    window.location = "quote" + num + ".html";
  }

  function randomQuote() {
    var req = new XMLHttpRequest();
    req.onreadystatechange = function() {
      if (req.readyState == 4 && req.status == 200) {
        makeUrl(req.responseText);
      }
    }

    req.open("GET", "count", true);
    req.send(null);
  }

  document.addEventListener("DOMContentLoaded", function() {
    document.getElementById("random-quote").addEventListener("click", randomQuote);
    var urlifiers = document.querySelectorAll(".urlify-btn");

    urlifiers.forEach(function(urlifier) {
      urlifier.addEventListener("click", urlify);
    });
  });
JS

HEADER = <<~HEADER
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <meta name="ssqdb-version" content="#{VERSION}">
      <meta name="generated-at" content="#{GENERATED_AT}">
      <% if defined?(index) && opts[:cards] %>
        <meta property="og:image" content="<%= webroot %>/quote<%= index %>.png">
        <meta property="og:title" content="<%= title %> - quote #<%= index %>">
        <meta property="og:url" content="<%= webroot %>/quote<%= index %>.html">
        <meta name="twitter:card" content="summary_large_image">
      <% end %>
      <title><%= title %> <%= " - quote \\#\#{index}" if defined? index %></title>
      <link rel="stylesheet" href="ssqdb.css">
      <script src="ssqdb.js" defer></script>
    </head>
    <body>
      <div class="left">
        <a href="index.html">all</a> /
        <a href="#" id="random-quote">random</a> /
        <a href="quotes.db">db</a> /
        <a href="about.html">about</a>
      </div>
      <div class="right">
        <a href="/">home</a>
      </div>

      <br>
HEADER

FOOTER = <<~FOOTER
  </body>
  </html>
FOOTER

QUOTE = <<~QUOTE
  <div class="quote">
  <h5 class="quote-header">
    quote #<%= index %>
    <a class="quote-link" href="quote<%= index %>.html">(permalink)</a>
    <a class="quote-link urlify-btn" href="#">(urls)</a>
    <% if opts[:json] %>
      <a class="quote-link" href="quote<%= index %>.json">(json)</a>
    <% end %>
    <% if opts[:cards] %>
      <a class="quote-link" href="quote<%= index %>.png">(card)</a>
    <% end %>
  </h5>
  <pre class="quote-text">
  <%= quote %>
  </pre>
  </div>
QUOTE

INDEX_PAGE = <<~INDEX
  #{HEADER}

  <% html_quotes.each_with_index do |quote, index| %>
    #{QUOTE}
  <% end %>

  #{FOOTER}
INDEX

QUOTE_PAGE = <<~QUOTE
  #{HEADER}

  #{QUOTE}

  #{FOOTER}
QUOTE

ABOUT_PAGE = <<~ABOUT
  #{HEADER}

  <p>
    ssqdb is a tiny static quote DB, inspired by QDB and its siblings.
  </p>

  <p>
    usage: <code>$ ssqdb /path/to/your/quotes.txt</code>
  </p>

  <p>
    "quotes.txt" should be formatted as follows:
    <pre>
      %
      &lt;person1&gt; witty comment
      &lt;person2&gt; witty response
      %
      &lt;person3&gt; less witty comment
      %
      (etc)
    </pre>
  </p>

  <p>
    this site was generated by ssqdb version #{VERSION}.
  </p>

  <p>
    the latest version can be found <a href="https://yossarian.net/snippets#ssqdb">here</a>.
  </p>

  <h2>quote cards</h2>

  <p>
    ssqdb can use
    <a href="https://yossarian.net/snippets#quotecard"><code>quotecard</code></a>
    to generate an image for each quote,
    and embed those images as Open Graph metadata. this is chiefly useful for
    quote DBs where each quote has a single author.
  </p>

  <p>
    quote cards can be enabled by passing <code>--cards</code>; the author for
    each quote is blank by default, but can be taken from either
    <code>$AUTHOR</code> in the environment, or from "IRC-formatted" quotes via
    <code>&lt;author&gt; foo</code> when <code>--author-irc</code> is passed,
    or from quotes that end with <code>- author</code> when
    <code>--author-tail</code> is passed.
  </p>

  <h2>pesudo-API</h2>

  <p>
    in addition to the HTML pages, ssqdb provides a static pseudo-API:
    <ul>
      <li>
        <code>/count</code> &mdash; the total number of quotes being served
      </li>
      <li>
        <code>/quoteNUM.json</code> &mdash; the quote at the <code>NUM</code>th index, starting at zero
      </li>
    </ul>

    note: JSON quotes are only available if <code>--json</code> was used during generation.
    expect 404s otherwise.
  </p>

  #{FOOTER}
ABOUT

def help
  puts <<~HELP
    Usage: #{$PROGRAM_NAME} <quote file> [output directory] [title] [options]

    Options:
      --cards       Generate a "card" image for each quote, for Open Graph metadata
      --author-irc  Treat each quote as beginning with "<author>", where needed
      --author-tail Treat each quote as ending with "- Author", where needed
      --json        Generate JSON files in addition to HTML
      --help        Print this help message
      --version     Print version information
      --verbose     Write verbose information to stderr

    Environment:
      AUTHOR        Use this string as the author, where needed
      WEBROOT       Use this path to form absolute URLs, where needed
  HELP

  exit 0
end

def version
  puts "ssqdb version #{VERSION}."

  exit 0
end

def verbose(msg, level: 0)
  warn "#{"\t" * level}[+] #{msg}"
end

opts = {
  cards: !!ARGV.delete("--cards"),
  author_irc: !!ARGV.delete("--author-irc"),
  author_tail: !!ARGV.delete("--author-tail"),
  json: !!ARGV.delete("--json"),
  help: !!ARGV.delete("--help") || !!ARGV.delete("-h"),
  version: !!ARGV.delete("--version"),
  verbose: !!ARGV.delete("--verbose"),
}

help    if opts[:help]
version if opts[:version]

quotes_file = ARGV.shift || abort("I need a file to load quotes from.")
output_dir  = ARGV.shift || __dir__
title       = CGI.escapeHTML(ARGV.shift || "ssqdb")
webroot     = ENV.fetch "WEBROOT", "."

abort("That isn't a file.")              unless File.file?(quotes_file)
abort("Output directory doesn't exist.") unless Dir.exist?(output_dir)

quotes_string = File.read(quotes_file)
quotes        = quotes_string.split(/^%$/).map(&:strip).reject(&:empty?).uniq

abort("This file doesn't look like a quote DB.") if quotes.empty?

html_quotes = quotes.map do |quote|
  CGI.escapeHTML(quote)
end

verbose "generating count, quotes.db, index/css/js, and about"

File.write(File.join(output_dir, "count"), quotes.size)
File.write(File.join(output_dir, "quotes.db"), quotes_string)
File.write(File.join(output_dir, "index.html"), ERB.new(INDEX_PAGE).result(binding))
File.write(File.join(output_dir, "ssqdb.css"), CSS)
File.write(File.join(output_dir, "ssqdb.js"), JS)
File.write(File.join(output_dir, "about.html"), ERB.new(ABOUT_PAGE).result(binding))

verbose "generating individual quote pages"

html_quotes.each_with_index do |quote, index|
  html_file = File.join(output_dir, "quote#{index}.html")
  File.write(html_file, ERB.new(QUOTE_PAGE).result(binding))

  verbose "generated #{html_file}", level: 1
end

if opts[:json]
  verbose "generating individual json files (requested)"

  quotes.each_with_index do |quote, index|
    json_file = File.join(output_dir, "quote#{index}.json")
    blob      = { count: index, quote: quote }

    File.write(json_file, blob.to_json)

    verbose "generated #{json_file}", level: 1
  end
end

if opts[:cards]
  verbose "generating individual card images (requested)"

  quotes.each_with_index do |quote, index|
    if opts[:author_irc]
      author, quote = quote.split " ", 2
    elsif opts[:author_tail]
      *quote_lines, author = quote.split "\n"
      author.delete_prefix! "- "
      quote = quote_lines.join("\n").chomp!
    else
      author = ENV.fetch "AUTHOR", ""
    end

    card_file = File.join(output_dir, "quote#{index}.png")

    system "quotecard", quote, author, card_file, exception: true

    verbose "generated #{card_file}", level: 1
  end
end
