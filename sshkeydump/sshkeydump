#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.13"
# dependencies = [
#     "cryptography>=44",
# ]
# ///

# sshkeydump: dump an SSH public key as JSON

import argparse
import json
from sys import stdin

from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import dsa, ec, ed25519, rsa


def main(pubkey: bytes) -> None:
    key = serialization.load_ssh_public_key(pubkey)

    match key:
        case rsa.RSAPublicKey():
            dump = {
                "type": "RSA",
                "n": key.public_numbers().n,
                "e": key.public_numbers().e,
                "size": key.public_numbers().n.bit_length(),
            }
        case dsa.DSAPublicKey():
            dump = {
                "type": "DSA",
                "y": key.public_numbers().y,
                "parameters": {
                    "p": key.public_numbers().parameter_numbers.p,
                    "q": key.public_numbers().parameter_numbers.q,
                    "g": key.public_numbers().parameter_numbers.g,
                },
                "size": key.public_numbers().y.bit_length(),
            }
        case ec.EllipticCurvePublicKey():
            dump = {
                "type": "EC",
                "curve": key.curve.name,
                "x": key.public_numbers().x,
                "y": key.public_numbers().y,
            }
        case ed25519.Ed25519PublicKey():
            dump = {
                "type": "Ed25519",
                "public_bytes": key.public_bytes(),
            }
        case _:
            raise ValueError(f"Unknown SSH public key type: {key}")

    print(json.dumps({"key": dump}, indent=2))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Dump an SSH public key as JSON")
    parser.add_argument(
        "keyfile", type=str, help="The SSH public key to dump; omit or use - for stdin"
    )
    args = parser.parse_args()

    if not args.keyfile or args.keyfile == "-":
        pubkey = stdin.buffer.read()
    else:
        with open(args.keyfile, "rb") as f:
            pubkey = f.read()

    main(pubkey)
